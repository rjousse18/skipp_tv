name: Run Python Script

on:
  push:
    branches:
      - main # Déclenche l'action uniquement sur la branche "main" (modifiable selon vos besoins)

jobs:
  run-script:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3 # Clone le dépôt

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9" # Version de Python souhaitée

      - name: Run Script
        run: |
          python convert_to_sql.py  # Remplacez "your_script.py" par le nom de votre script

      - name: Get Latest Tag
        id: get_latest_tag
        run: echo "LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV

      - name: Calculate New Tag
        id: calculate_tag
        run: |
          if [[ -z "${{ env.LATEST_TAG }}" ]]; then
            echo "NEW_TAG=v0.0.1" >> $GITHUB_ENV
          else
            IFS='.' read -r MAJOR MINOR PATCH <<<"${{ env.LATEST_TAG }}"
            PATCH=$((PATCH + 1))
            echo "NEW_TAG=v${MAJOR}.${MINOR}.${PATCH}" >> $GITHUB_ENV
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: "Release ${{ env.NEW_TAG }}"
          body: "This release contains the generated file."
          draft: false
          prerelease: false

      - name: Upload File to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./insert_data.sql # Chemin vers le fichier généré
          asset_name: database.sql
          asset_content_type: application/sql # Type MIME du fichier
